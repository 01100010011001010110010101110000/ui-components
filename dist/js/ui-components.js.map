{"version":3,"sources":["webpack:///webpack/bootstrap b934b3b1bc99cc9f47a7","webpack:///./src/styles/ui-components.scss","webpack:///./src/index.ts","webpack:///./src/toolbar/index.ts","webpack:///./src/toolbar/services/index.ts","webpack:///./src/toolbar/services/toolbarSettingsService.ts","webpack:///./src/toolbar/interfaces/toolbarType.ts","webpack:///./src/toolbar/components/index.ts","webpack:///./src/toolbar/components/toolbar-menu/index.ts","webpack:///./src/toolbar/components/toolbar-menu/toolbarComponent.ts","webpack:///./src/toolbar/components/toolbar-menu/toolbar-menu.html","webpack:///./src/toolbar/components/toolbar-menu/toolbarButtonDirective.ts","webpack:///./src/toolbar/components/toolbar-menu/toolbar-button.html","webpack:///./src/toolbar/components/toolbar-menu/toolbarListComponent.ts","webpack:///./src/toolbar/components/toolbar-menu/toolbar-list.html","webpack:///./src/toolbar/components/toolbar-menu/toolbarViewComponent.ts","webpack:///./src/toolbar/components/toolbar-menu/toolbar-view.html","webpack:///./src/common/index.ts","webpack:///./src/common/services/index.ts","webpack:///./src/common/services/endpointsService.ts","webpack:///./src/common/components/index.ts","webpack:///./src/common/components/sortItemsComponent.ts","webpack:///./src/gtl/index.ts","webpack:///./src/gtl/services/index.ts","webpack:///./src/gtl/services/dataTableService.ts","webpack:///./src/gtl/filters/index.ts","webpack:///./src/gtl/filters/limitToSuffixFilter.ts","webpack:///./src/gtl/components/index.ts","webpack:///./src/gtl/components/data-table/index.ts","webpack:///./src/gtl/components/data-table/dataTableComponent.ts","webpack:///./src/gtl/interfaces/abstractDataViewClass.ts","webpack:///./src/gtl/components/data-table/data-table.html"],"names":[],"mappings":"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","file":"js/ui-components.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \".\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b934b3b1bc99cc9f47a7\n **/","// removed by extract-text-webpack-plugin\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/styles/ui-components.scss\n ** module id = 18\n ** module chunks = 1\n **/","///<reference path=\"tsd.d.ts\"/>\nmodule miqStaticAssets {\n  angular.module('miqStaticAssets', ['miqStaticAssets.toolbar', 'miqStaticAssets.common', 'miqStaticAssets.gtl']);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/index.ts\n **/","///<reference path=\"../tsd.d.ts\"/>\nimport services from './services';\nimport components from './components';\n\nmodule toolbar {\n  export const app = angular.module('miqStaticAssets.toolbar', ['ngSanitize']);\n  services(app);\n  components(app);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/index.ts\n **/","import ToolbarSettingsService from './toolbarSettingsService';\n\nexport default (module: ng.IModule) => {\n  module.service('MiQToolbarSettingsService', ToolbarSettingsService);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/services/index.ts\n **/","import {IToolbarItem, IToolbarSettings, IRequestData} from '../interfaces/toolbar';\nimport {ToolbarType} from '../interfaces/toolbarType';\n\nexport default class ToolbarSettingsService {\n  private countSelected: number = 0;\n  public items: Array<Array<IToolbarItem>>;\n  public dataViews: Array<IToolbarItem>;\n\n  /*@ngInject*/\n  constructor(private $http: any, private MiQEndpointsService: any) {}\n\n  /**\n   * FIXME: the method is obsolete and should be removed once setCount is being used instead\n   * @param isClicked\n   */\n  public checkboxClicked(isClicked: boolean): void {\n    isClicked ? this.countSelected++ : this.countSelected--;\n    this.updateByCount();\n  }\n\n  /**\n   * Update the selected item count, and enable/disable onwhen toolbar items\n   * @param count - the number of currently selected items\n   */\n  public setCount(count: number): void {\n    this.countSelected = count;\n    this.updateByCount();\n  }\n\n  /**\n    * Traverses through all the items and enables them by number of selected items.\n    */\n  private updateByCount(): void {\n    _.chain(this.items)\n      .flatten()\n      .filter(item => item)\n      .each((item: any) => {\n        this.enableToolbarItemByCountSelected(item);\n      })\n      .map('items')\n      .flatten()\n      .filter(item => item)\n      .each((item: any) => {\n        this.enableToolbarItemByCountSelected(item);\n      })\n      .value();\n  }\n\n  /**\n   *\n   * @param toolbarObject\n   * @returns {{items: Array<Array<IToolbarItem>>, dataViews: Array<IToolbarItem>}}\n   */\n  public generateToolbarObject(toolbarObject: Array<Array<IToolbarItem>>): IToolbarSettings {\n    this.countSelected = 0;\n    this.items = this.separateItems(toolbarObject.filter(item => !!item));\n    this.dataViews = this.filterViews();\n    return {\n      items: this.items,\n      dataViews: this.dataViews\n    };\n  }\n\n  /**\n   *\n   * @returns {ng.IPromise<IToolbarSettings>}\n   * @param getData\n   */\n  public getSettings(getData?: IRequestData): ng.IPromise<IToolbarSettings> {\n    return this.httpGet(\n      this.MiQEndpointsService.rootPoint + this.MiQEndpointsService.endpoints.toolbarSettings,\n      getData\n    ).then((items: Array<IToolbarItem>[]) => this.generateToolbarObject(items));\n  }\n\n  /**\n   * Helper method for separating items in toolbar by separators.\n   * @param toolbarItems all toolbar items.\n   * @returns {Array} of separated items.\n   */\n  private separateItems(toolbarItems: Array<Array<IToolbarItem>>): Array<Array<IToolbarItem>> {\n    let separatedArray = [];\n    toolbarItems.forEach((items: IToolbarItem[]) => {\n      let arrayIndex = separatedArray.push([]);\n      items.forEach((item: IToolbarItem) => {\n        if (item.type !== ToolbarType.SEPARATOR) {\n          separatedArray[arrayIndex - 1].push(item);\n        } else {\n          arrayIndex = separatedArray.push([]);\n        }\n      });\n    });\n    return separatedArray;\n  }\n\n  /**\n   *\n   * @returns {Array<IToolbarItem>}\n   */\n  private filterViews(): Array<IToolbarItem> {\n    return _.flatten(this.items)\n      .filter(\n        item => item && item.id && item.id.indexOf('view_') === 0\n      );\n  }\n\n  /**\n   *\n   * @param url\n   * @param dataObject\n   * @returns {ng.IPromise<Array<Array<IToolbarItem>>>}\n   */\n  private httpGet(url: string, dataObject: any): ng.IPromise<Array<Array<IToolbarItem>>> {\n    return this.$http.get(url, {params: dataObject})\n      .then(dataResponse => dataResponse.data);\n  }\n\n  /**\n   *\n   * @param toolbarItem\n   */\n  private enableToolbarItemByCountSelected(toolbarItem: IToolbarItem): void {\n    if (toolbarItem.onwhen) {\n      if (toolbarItem.onwhen.slice(-1) === '+') {\n        toolbarItem.enabled = this.countSelected >= ToolbarSettingsService.parseNumberFromWhen(toolbarItem.onwhen);\n      } else {\n        toolbarItem.enabled = this.countSelected === parseInt(toolbarItem.onwhen, 10);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param onWhen\n   * @returns {number}\n   */\n  private static parseNumberFromWhen(onWhen: string) {\n    return onWhen.indexOf('+') !== -1 ? parseInt(onWhen.slice(0, onWhen.length - 1), 10) : parseInt(onWhen, 10);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/services/toolbarSettingsService.ts\n **/","/**\n * Enum for toolbar types. It holds string value of item's type.\n * @memberof miqStaticAssets\n * @ngdoc enum\n * @name ToolbarType\n */\nexport const ToolbarType  = {\n  /**\n   * Button type: `button`\n   * @type {string}\n   */\n  BUTTON: 'button',\n  /**\n   * Button two state type: `buttonTwoState`\n   * @type {string}\n   */\n  BUTTON_TWO_STATE: 'buttonTwoState',\n  /**\n   * Button select type: `buttonSelect`\n   * @type {string}\n   */\n  BUTTON_SELECT: 'buttonSelect',\n  /**\n   * Custom type: `custom`\n   * @type {string}\n   */\n  CUSTOM: 'custom',\n\n  /**\n   * Separator type: `separator`\n   * @type {string}\n   */\n  SEPARATOR: 'separator'\n};\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/interfaces/toolbarType.ts\n **/","import toolbarMenu from './toolbar-menu';\n\nexport default (module: ng.IModule) => {\n  toolbarMenu(module);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/components/index.ts\n **/","import Toolbar from './toolbarComponent';\nimport ToolbarButton from './toolbarButtonDirective';\nimport ToolbarList from './toolbarListComponent';\nimport ToolbarView from './toolbarViewComponent';\n\nexport default (module: ng.IModule) => {\n  module.component('miqToolbarMenu', new Toolbar);\n  module.component('miqToolbarList', new ToolbarList);\n  module.component('miqToolbarView', new ToolbarView);\n  module.directive('miqToolbarButton', ToolbarButton.Factory());\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/components/toolbar-menu/index.ts\n **/","import {IToolbarItem} from '../../interfaces/toolbar';\nimport {ToolbarType} from '../../interfaces/toolbarType';\n\n/**\n * @memberof miqStaticAssets\n * @ngdoc controller\n * @name ToolbarController\n * @param $window {ng.IWindowService} window service for redirecting to non angular pages.\n * @param $location {ng.ILocationService} location service to handle redirect to different angular pages.\n * @param $sce {ng.ISCEService} service for enabling html strings to be html objects injected to page as html and not as\n * string.\n */\nexport class ToolbarController {\n  public toolbarItems: any;\n  public toolbarViews: any;\n  public onViewClick: (args: {item: any, $event: any}) => void;\n  /*@ngInject*/\n  constructor(private $window: ng.IWindowService,\n              private $location: ng.ILocationService,\n              private $sce: ng.ISCEService) {\n  }\n\n  /**\n   * Handle clicking on item in toolbar.\n   * Check what function has item for handling click action it's one of [actionUrl, redirectUrl, actionFunction,\n   * eventFunction].\n   *    * actionUrl      - will perform location path change.\n   *    * redirectUrl    - will perform window redirect.\n   *    * actionFunction - will perform call without any arguments.\n   *    * eventFunction  - will perform call to this function with $event specified.\n   * @memberof ToolbarController\n   * @function onItemClick\n   * @param {Object} item what was clicked in toolbar (member of toolbar items).\n   * @param {Object} $event for passing it to eventFunction of item (good for checking target).\n   */\n  public onItemClick(item: any, $event: any) {\n    if (item.hasOwnProperty('actionUrl')) {\n      this.$location.path(item.actionUrl);\n    } else if (item.hasOwnProperty('redirectUrl')) {\n      this.$window.location = item.redirectUrl;\n    } else if (item.hasOwnProperty('actionFunction')) {\n      item.actionFunction();\n    } else if (item.hasOwnProperty('eventFunction')) {\n      item.eventFunction($event);\n    }\n  }\n\n  /**\n   * Filter out items which does not have buttons, select or custom html in them and check if array is not empty. If\n   * this array would be empty there is no content which could be shown in toolbar group.\n   *    * see {@link miqStaticAssets.ToolbarController#isButtonOrSelect} on how it is checked button or select item.\n   *    * see {@link miqStaticAssets.ToolbarController#isCustom} on how it is checked custom html item.\n   * @memberof ToolbarController\n   * @function hasContent\n   * @param {Array<IToolbarItem>} toolbarItem array of items which are checked for content.\n   * @returns {boolean} true|false isEmpty or not.\n   */\n  public hasContent(toolbarItem: Array<IToolbarItem>): boolean {\n    return toolbarItem && toolbarItem.filter((item) => {\n        return item && (ToolbarController.isButtonOrSelect(item) || ToolbarController.isCustom(item));\n      }).length !== 0;\n  }\n\n  /**\n   * Escape html custom data and make them available for html insertion to toolbar.\n   * @memberof ToolbarController\n   * @function hasContent\n   * @param escapedString html string without escaped items.\n   * @returns {any} html object, this object can be bound to see\n   * {@link https://docs.angularjs.org/api/ng/directive/ngBindHtml}\n   */\n  public trustAsHtml(escapedString: string): any {\n    escapedString = ToolbarController.htmlDecode(escapedString);\n    return this.$sce.trustAsHtml(escapedString);\n  }\n\n  /**\n   * Helper method for getting string value of {@link ToolbarType.BUTTON_SELECT}\n   * @memberof ToolbarController\n   * @function getToolbarListType\n   * @returns {string}\n   */\n  public getToolbarListType(): string {\n    return ToolbarType.BUTTON_SELECT;\n  }\n\n  /**\n   * Helper method for getting string value of {@link ToolbarType.BUTTON}\n   * @memberof ToolbarController\n   * @function getToolbarListType\n   * @returns {string}\n   */\n  public getButtonType(): string {\n    return ToolbarType.BUTTON;\n  }\n\n  /**\n   * Helper method for getting string value of {@link ToolbarType.CUSTOM}\n   * @memberof ToolbarController\n   * @function getToolbarListType\n   * @returns {string}\n   */\n  public getCustomType(): string {\n    return ToolbarType.CUSTOM;\n  }\n\n  public getButtonTwoState() {\n    return ToolbarType.BUTTON_TWO_STATE;\n  }\n\n  /**\n   * Private static function for decoding html.\n   * @memberof ToolbarController\n   * @function htmlDecode\n   * @param input html string containing custom html.\n   * @returns {string} unescaped html string.\n   */\n  public static htmlDecode(input: string): string {\n    let e = document.createElement('div');\n    e.innerHTML = input;\n    return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;\n  }\n\n  /**\n   * Private static function for checking if toolbar item has name and if this name is `\"custom\"`.\n   * @memberof ToolbarController\n   * @function hasContent\n   * @param {IToolbarItem} item which is checked for name property.\n   * @returns {boolean} true|false if it's item with custom html.\n   */\n  private static isCustom(item: IToolbarItem): boolean {\n    return item.name && item.name === ToolbarType.CUSTOM;\n  }\n\n  /**\n   * Private static function for checking if toolbar item type and if this type is button or select.\n   *    * see {@link miqStaticAssets.ToolbarController#isButtonSelect} on how it's checked for select type.\n   *    * see {@link miqStaticAssets.ToolbarController#isButton} on how it's checked for button type.\n   * @memberof ToolbarController\n   * @function isButtonOrSelect\n   * @param {IToolbarItem} item which is checked for type property.\n   * @returns {boolean} true|false if it's item with button or button select type.\n   */\n  private static isButtonOrSelect(item: IToolbarItem): boolean {\n    return item.type && (\n        (ToolbarController.isButtonSelect(item) && item.items && item.items.length !== 0)\n        || ToolbarController.isButton(item)\n        || ToolbarController.isButtonTwoState(item)\n      );\n  }\n\n  private static isButtonTwoState(item: IToolbarItem): boolean {\n    return item.type === ToolbarType.BUTTON_TWO_STATE;\n  }\n\n  /**\n   * Private static function for checking if toolbar item type is buttonSelect.\n   * @memberof ToolbarController\n   * @function isButtonSelect\n   * @param {IToolbarItem} item item which is checked for type property.\n   * @returns {boolean} true|false if it's item with type equals to `\"buttonSelect\"`.\n   */\n  private static isButtonSelect(item: IToolbarItem): boolean {\n    return item.type === ToolbarType.BUTTON_SELECT;\n  }\n\n  /**\n   * Private static function for checking if toolbar item type is button.\n   * @memberof ToolbarController\n   * @function isButton\n   * @param {IToolbarItem} item item which is checked for type property.\n   * @returns {boolean} true|false if it's item with type equals to `\"button\"`.\n   */\n  private static isButton(item): boolean {\n    return item.type === ToolbarType.BUTTON;\n  }\n}\n\n/**\n * @memberof miqStaticAssets\n * @ngdoc component\n * @name miqToolbarMenu\n * @description\n *    This component is for whole toolbar implementation. It's advantages are, that it takes custom components as well\n *    so they can be used instead of just plain JS objects (pass html inside toolbarItems attribute).\n *    See {@link miqStaticAssets.ToolbarController} for implementation of all methods and behavior of this component.\n *    Attribute toolbarItems for custom html needs to have set `args.html`:\n *    ```JSON\n *    [[\n *      {\"name\" : \"custom\",\n *      \"args\" : {\n *        ...\n *        \"html\" : \"<div>html string, this string will be generated as part of form group</div>\"\n *        ...\n *      }}\n *    ]]\n *    ```\n *    How each button is treated see {@link miqStaticAssets.ToolbarController#hasContent} and observe each static\n *    function which\n *    is responsible for deciding what type of button will be used.\n *\n * @attr {Expression} onViewClick\n *    Method which will be executed when clicked on view. See {@link miqStaticAssets.ToolbarController#onViewClick}\n *    which arguments are\n *    needed.\n * @attr {Array} toolbarViews\n *    List of all views which are used in toolbar. Since we use typescript this attribute has specific type of:\n *    `Array<IToolbarItem>` See {@link IToolbarItem} for entities of toolbarViews.\n * @attr {Array} toolbarItems\n *    List of all items which are used in toolbar. Since we use typescript this attribute has specific type of:\n *    `Array<Array<IToolbarItem>>` See {@link IToolbarItem} for entities of toolbarItems.\n * @example\n * <miq-toolbar-menu toolbar-views=\"ctrl.toolbarViews\"\n *                   toolbar-items=\"ctrl.toolbarItems\"\n *                   on-view-click=\"ctrl.onClick(item)\">\n * </miq-toolbar-menu>\n */\nexport default class Toolbar {\n  public replace: boolean = true;\n  public template = require<string>('./toolbar-menu.html');\n  public controller: any = ToolbarController;\n  public controllerAs: string = 'vm';\n  public bindings: any = {\n    toolbarViews: '<',\n    toolbarItems: '<',\n    onViewClick: '&'\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/components/toolbar-menu/toolbarComponent.ts\n **/","module.exports = \"<div class=\\\"toolbar-pf-actions miq-toolbar-actions\\\">\\n  <div class=\\\"form-group miq-toolbar-group\\\"\\n       ng-repeat=\\\"toolbarItem in vm.toolbarItems\\\"\\n       ng-if=\\\"vm.hasContent(toolbarItem)\\\">\\n    <ng-repeat ng-repeat=\\\"item in toolbarItem \\\">\\n      <miq-toolbar-button ng-if=\\\"item.type === vm.getButtonType()\\\"\\n                          toolbar-button=\\\"item\\\"\\n                          on-item-click=\\\"vm.onItemClick(item, $event)\\\">\\n      </miq-toolbar-button>\\n      <miq-toolbar-button ng-if=\\\"item.type === vm.getButtonTwoState() && item.id.indexOf('view_') === -1\\\"\\n                          toolbar-button=\\\"item\\\"\\n                          on-item-click=\\\"vm.onItemClick(item, $event)\\\">\\n      </miq-toolbar-button>\\n      <miq-toolbar-list ng-if=\\\"item.type === vm.getToolbarListType() && item.items.length > 0\\\"\\n                        toolbar-list=\\\"item\\\"\\n                        on-item-click=\\\"vm.onItemClick(item, $event)\\\">\\n      </miq-toolbar-list>\\n      <div ng-if=\\\"item.name == 'custom' && item.args && item.args.html\\\"\\n           ng-bind-html=\\\"vm.trustAsHtml(item.args.html)\\\"\\n           class=\\\"miq-custom-html\\\"></div>\\n    </ng-repeat>\\n  </div>\\n  <miq-toolbar-view toolbar-views=\\\"vm.toolbarViews\\\"\\n                    on-item-click=\\\"vm.onViewClick({item: item, $event: $event})\\\"\\n                    class=\\\"miq-view-list\\\">\\n  </miq-toolbar-view>\\n</div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/toolbar/components/toolbar-menu/toolbar-menu.html\n ** module id = 28\n ** module chunks = 1\n **/","/**\n * @memberof miqStaticAssets\n * @ngdoc directive\n * @name miqToolbarButton\n * @description\n *    Directive withou controller. It will create new toolbar button in toolbar.\n *\n * @attr {Expression} onItemClick\n *    Method for handling clicking on this button (will be called with `{item: item}` object).\n * @attr {IToolbarItem} toolbarButton\n *    Toolbar item based on which will be this button generated.\n * @example\n * <miq-toolbar-button toolbar-button=\"toolbarButton\"\n *                   on-item-click=\"ctrl.onClick(item)\">\n * </miq-toolbar-button>\n */\nexport default class ToolbarButton implements ng.IDirective {\n  public replace: boolean = true;\n  public template = require<string>('./toolbar-button.html');\n  public scope: any = {\n    toolbarButton: '<',\n    onItemClick: '&'\n  };\n\n  public static Factory = () => {\n    let directive: ng.IDirectiveFactory = () => new ToolbarButton();\n    directive.$inject = [];\n    return directive;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/components/toolbar-menu/toolbarButtonDirective.ts\n **/","module.exports = \"<button title=\\\"{{toolbarButton.title}}\\\"\\n        data-explorer=\\\"{{toolbarButton.explorer}}\\\"\\n        data-confirm-tb=\\\"{{toolbarButton.confirm}}\\\"\\n        id=\\\"{{toolbarButton.id}}\\\"\\n        name=\\\"{{toolbarButton.name}}\\\"\\n        type=\\\"button\\\"\\n        class=\\\"btn btn-default\\\"\\n        data-click=\\\"{{toolbarButton.id}}\\\"\\n        data-url=\\\"{{toolbarButton.url}}\\\"\\n        data-url_parms=\\\"{{toolbarButton.url_parms}}\\\"\\n        ng-class=\\\"{active: toolbarButton.selected, disabled: !toolbarButton.enabled}\\\"\\n        ng-hide=\\\"toolbarButton.hidden\\\"\\n        ng-click=\\\"onItemClick({item: toolbarButton, $event: $event})\\\">\\n  <i ng-if=\\\"toolbarButton.icon\\\" class=\\\"{{toolbarButton.icon}}\\\" style=\\\"\\\"></i>\\n  <img ng-if=\\\"toolbarButton.img_url && !toolbarButton.icon\\\" ng-src=\\\"{{toolbarButton.img_url}}\\\"\\n       data-enabled=\\\"{{toolbarButton.img_url}}\\\"\\n       data-disabled=\\\"{{toolbarButton.img_url}}\\\">\\n  {{toolbarButton.text}}\\n</button>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/toolbar/components/toolbar-menu/toolbar-button.html\n ** module id = 30\n ** module chunks = 1\n **/","import {IToolbarItem} from '../../interfaces/toolbar';\n/**\n * Asf\n *\n * @interface\n */\nexport interface IToolbarListBindings {\n  toolbarList: any;\n  onItemClick: (args: {item: any}) => void;\n}\n\n/**\n * @memberof miqStaticAssets\n * @ngdoc controller\n * @name ToolbarListController\n * @implements {IToolbarListBindings}\n */\nexport class ToolbarListController implements IToolbarListBindings {\n  public toolbarList: IToolbarItem;\n  public isEmpty: boolean = false;\n\n  /**\n   * Method for handling clicking on toolbar list's item.\n   * @memberof ToolbarListController\n   * @function onItemClick\n   * @param {Object} {item: Object} object with item property set to which item was clicked.\n   */\n  public onItemClick: (args: {item: any, $event: any}) => void;\n\n  /**\n   * Angular's function to observe on changes.\n   * @memberof ToolbarListController\n   * @function isToolbarEmpty\n   * @param changesObj changed object.\n   */\n  public $onChanges(changesObj: any) {\n    if (changesObj.toolbarList) {\n      this.isEmpty = this.isToolbarEmpty();\n    }\n  }\n\n  /**\n   * Method which filters out\n   * @memberof ToolbarListController\n   * @function isToolbarEmpty\n   * @returns {boolean}\n   */\n  private isToolbarEmpty(): boolean {\n    return this.toolbarList &&\n      this.toolbarList.items &&\n      this.toolbarList.items.filter((item: IToolbarItem) => !item.hidden).length > 0;\n  }\n}\n\n/**\n * @memberof miqStaticAssets\n * @ngdoc component\n * @name miqToolbarList\n * @description\n *    Component which will generate list in toolbar with toolbarItems as dropdown menu.\n *\n * @attr {Expression} onItemClick\n *    Method which will be executed when clicked on view. See\n *    {@link miqStaticAssets.ToolbarListController#onItemClick} which arguments are\n *    needed.\n * @attr {Array} toolbarItems\n *    List of all items which are used in toolbar. Since we use typescript this attribute has specific type of:\n *    `Array<Array<IToolbarItem>>` See {@link IToolbarItem} for entities of toolbarItems.\n * @example\n * <miq-toolbar-list toolbar-list=\"ctrl.toolbarItems\"\n *                   on-item-click=\"ctrl.onClick(item)\">\n * </miq-toolbar-list>\n */\nexport default class ToolbarList {\n  public replace: boolean = true;\n  public template = require<string>('./toolbar-list.html');\n  public controller: any = ToolbarListController;\n  public controllerAs: string = 'vm';\n  public bindings: any = {\n    toolbarList: '<',\n    onItemClick: '&'\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/components/toolbar-menu/toolbarListComponent.ts\n **/","module.exports = \"<div class=\\\"btn-group\\\" dropdown ng-if=\\\"vm.isEmpty\\\">\\n  <button type=\\\"button\\\" dropdown-toggle class=\\\"btn dropdown-toggle btn-default\\\"\\n          ng-class=\\\"{disabled: !vm.toolbarList.enabled}\\\" title=\\\"{{vm.toolbarList.title}}\\\">\\n    <i class=\\\"{{vm.toolbarList.icon}}\\\" style=\\\"margin-right: 5px;\\\" ng-if=\\\"vm.toolbarList.icon\\\"></i>\\n    {{vm.toolbarList.text}}\\n    <span class=\\\"caret\\\"></span>\\n  </button>\\n  <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\n    <li ng-repeat=\\\"item in vm.toolbarList.items track by $index\\\" ng-class=\\\"{disabled: !item.enabled}\\\">\\n      <a ng-if=\\\"item.type !== 'separator'\\\"\\n         ng-hide=\\\"item.hidden\\\"\\n         href=\\\"\\\"\\n         title=\\\"{{item.title}}\\\"\\n         data-explorer=\\\"{{item.explorer}}\\\"\\n         data-confirm-tb=\\\"{{item.confirm}}\\\"\\n         ng-click=\\\"vm.onItemClick({item: item, $event: $event})\\\"\\n         data-function=\\\"{{item.data.function}}\\\"\\n         data-function-data=\\\"{{item.data['function-data']}}\\\"\\n         data-target=\\\"{{item.data.target}}\\\"\\n         data-toggle=\\\"{{item.data.toggle}}\\\"\\n         data-click=\\\"{{item.id}}\\\"\\n         name=\\\"{{item.id}}\\\"\\n         id=\\\"{{item.id}}\\\"\\n         data-url_parms=\\\"{{item.url_parms}}\\\"\\n         data-url=\\\"{{item.url}}\\\">\\n        <i ng-if=\\\"item.icon\\\" class=\\\"{{item.icon}}\\\"></i>\\n        <img ng-if=\\\"item.img_url && !item.icon\\\" ng-src=\\\"{{item.img_url}}\\\"\\n             data-enabled=\\\"{{item.img_url}}\\\"\\n             data-disabled=\\\"{{item.img_url}}\\\">\\n        {{item.text}}\\n      </a>\\n      <div ng-if=\\\"item.type === 'separator'\\\" class=\\\"divider \\\" role=\\\"presentation\\\" ng-hide=\\\"item.hidden\\\"></div>\\n    </li>\\n  </ul>\\n</div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/toolbar/components/toolbar-menu/toolbar-list.html\n ** module id = 32\n ** module chunks = 1\n **/","/**\n * Bindings to toolbar view.\n *   * toolbarViews\n *   * onItemClick\n * @interface\n */\nexport interface IToolbarViewBindings {\n  toolbarViews: any;\n  onItemClick: (args: {item: any, $event: any}) => void;\n}\n\n/**\n * @memberof miqStaticAssets\n * @ngdoc controller\n * @name ToolbarViewController\n * @implements {IToolbarViewBindings}\n */\nexport class ToolbarViewController implements IToolbarViewBindings {\n  public toolbarViews: any;\n  public onItemClick: (args: {item: any}) => void;\n}\n\n/**\n * @memberof miqStaticAssets\n * @ngdoc component\n * @name miqToolbarView\n * @description\n *    Component which will generate list in toolbar with toolbarItems as dropdown menu.\n *\n * @attr {Expression} onItemClick\n *    Method which will be executed when clicked on view.\n * @attr {Array} toolbarViews\n *    List of all views which are used in toolbar.\n * @example\n * <miq-toolbar-view toolbar-views=\"ctrl.toolbarViews\"\n *                   on-item-click=\"ctrl.onClick(item)\">\n * </miq-toolbar-view>\n */\nexport default class ToolbarView {\n  public replace: boolean = false;\n  public template = require<string>('./toolbar-view.html');\n  public controller: any = ToolbarViewController;\n  public controllerAs: string = 'vm';\n  public bindings: any = {\n    toolbarViews: '<',\n    onItemClick: '&'\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/toolbar/components/toolbar-menu/toolbarViewComponent.ts\n **/","module.exports = \"<div class=\\\"toolbar-pf-view-selector pull-right form-group\\\">\\n  <button class=\\\"btn btn-link\\\"\\n          ng-repeat=\\\"item in vm.toolbarViews\\\"\\n          ng-class=\\\"{active: item.selected}\\\"\\n          title=\\\"{{item.title}}\\\"\\n          id=\\\"{{item.id}}\\\"\\n          data-url=\\\"{{item.url}}\\\"\\n          data-url_parms=\\\"{{item.url_parms}}\\\"\\n          ng-click=\\\"vm.onItemClick({item: item, $event: $event})\\\"\\n          name=\\\"{{item.name}}\\\">\\n    <i class=\\\"{{item.icon}}\\\" style=\\\"\\\"></i>\\n  </button>\\n</div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/toolbar/components/toolbar-menu/toolbar-view.html\n ** module id = 34\n ** module chunks = 1\n **/","///<reference path=\"../tsd.d.ts\"/>\nimport services from './services';\nimport components from './components';\n\nmodule common {\n  export const app = angular.module('miqStaticAssets.common', []);\n  services(app);\n  components(app);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/common/index.ts\n **/","import EndpointsService from './endpointsService';\n\nexport default (module: ng.IModule) => {\n  module.service('MiQEndpointsService', EndpointsService);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/common/services/index.ts\n **/","import {IEndpoints} from '../interfaces/endpoints';\nexport class DefaultEndpoints implements IEndpoints {\n  public listDataTable: string;\n  public deleteItemDataTable: string;\n  public validateItem: string;\n  public createItem: string;\n  public providerSettings: string;\n  public toolbarSettings: string;\n  constructor() {\n    this.listDataTable = '/list';\n    this.deleteItemDataTable = '/delete';\n    this.validateItem = '/validate';\n    this.createItem = '/create';\n    this.providerSettings = '/list_providers_settings';\n    this.toolbarSettings = '/toolbar';\n  }\n}\n\nexport default class EndpointsService {\n  public endpoints: IEndpoints;\n  public rootPoint: string = '';\n\n  constructor() {\n    this.endpoints = new DefaultEndpoints;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/common/services/endpointsService.ts\n **/","import SortItems from './sortItemsComponent';\n\nexport default (module: ng.IModule) => {\n  module.component('miqSortItems', new SortItems);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/common/components/index.ts\n **/","/**\n * Controller for sort items component, it filters headers to fit config object of `pf-sort`.\n * @memberof miqStaticAssets.common\n * @ngdoc controller\n * @name SortItemsController\n */\nexport class SortItemsController {\n  public headers: any;\n  public options: any;\n  public sortObject: any;\n  public onSort: (args: {sortObject: any, isAscending: boolean}) => void;\n\n  constructor() {\n    this.initOptions();\n  }\n\n  /**\n   * Angular's method for checking one way data bounded properties changes.\n   * @memberof SortItemsController\n   * @function $onChanges\n   * @param changesObj {Object} angular changes object.\n   */\n  public $onChanges(changesObj: any) {\n    if (changesObj.headers) {\n      this.fillFields();\n      if (this.sortObject) {\n        this.setSortItem();\n      }\n    }\n  }\n\n  /**\n   * Public method for setting item which is currently sorted by. It will take id of object in `headers` as `colId`,\n   * it's text as actual Id and same applies to `title`.\n   * @memberof SortItemsController\n   * @function setSortItem\n   */\n  public setSortItem() {\n    this.options.currentField = {\n      colId: _.findIndex(this.headers, this.sortObject.sortObject),\n      id: this.sortObject.sortObject.text.toLowerCase(),\n      title: this.sortObject.sortObject.text\n    };\n    this.options.isAscending = this.sortObject.isAscending;\n  }\n\n  /**\n   * Public method which is called after constructing this controller. It will set default values for config object,\n   * along side with sort method.\n   * @memberof SortItemsController\n   * @function initOptions\n   */\n  public initOptions() {\n    this.options = {\n      fields: [],\n      onSortChange: (item: any, isAscending: boolean) => this.onSort({sortObject: item, isAscending: isAscending}),\n      currentField: {}\n    };\n  }\n\n  /**\n   * Private method which will filter out and transform headers to config object. This function will filter out all\n   * columns which has `is_narrow` and no `text` is set fot them. Also it will use each header key as `colId`,\n   * text as `id` and again text as `title`.\n   * @memberof SortItemsController\n   * @function fillFields\n   */\n  private fillFields() {\n    _.each(this.headers, (oneCol, key) => {\n      if (!oneCol.hasOwnProperty('is_narrow') && oneCol.hasOwnProperty('text')) {\n        this.options.fields.push({\n          colId: key,\n          id: oneCol.text.toLowerCase(),\n          title: oneCol.text\n        });\n      }\n    });\n  }\n}\n/**\n * @description\n *    Component for showing sort component. See {@link miqStaticAssets.common.SortItemsController} on how functions\n *    and properties are handled, This component requires `pf-sort` (see\n *    <a href=\"http://angular-patternfly.rhcloud.com/#/api/patternfly.sort.directive:pfSort\">patternfly's\n *    implemetnation</a>) component to be part of application scope.\n *    If you do not provide such component no sort will be show. `pf-sort` requires `config` property which consists of:\n *    ```javascript\n *    config = {\n *      fields: [],\n *      onSortChange: (item: any, isAscending: boolean) => void,\n *      currentField: {}\n *    }\n *    ```\n * @memberof miqStaticAssets.common\n * @ngdoc component\n * @name miqSortItems\n * @attr {Expression} onSort function which is called after sorting has changed.\n * @attr {Object} headers items which will be present in sort chooser.\n * @attr {Object} sortObject object which is currently sorted by.\n * @example\n * <miq-sort-items on-sort=\"ctrl.onSort(sortObject, isAscending)\"\n *                 headers=\"ctrl.headers\"\n *                 sort-object=\"ctrl.currentSortObject\">\n * </miq-sort-items>\n */\nexport default class SortItems implements ng.IComponentOptions {\n  public replace: boolean = true;\n  public template = `<div pf-sort config=\"vm.options\"></div>`;\n  public controller = SortItemsController;\n  public controllerAs = 'vm';\n  public bindings: any = {\n    onSort: '&',\n    headers: '<',\n    sortObject: '<'\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/common/components/sortItemsComponent.ts\n **/","///<reference path=\"../tsd.d.ts\"/>\nimport services from './services';\nimport filters from './filters';\nimport components from './components';\n\nmodule gtl {\n  export const app = angular.module('miqStaticAssets.gtl', []);\n  services(app);\n  filters(app);\n  components(app);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/index.ts\n **/","import DataTableService from './dataTableService';\n\nexport default (module: ng.IModule) => {\n  module.service('MiQDataTableService', DataTableService);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/services/index.ts\n **/","import {IDataTableService, IRowsColsResponse} from '../interfaces/dataTable';\n\n/**\n * @memberof miqStaticAssets.gtl\n * @ngdoc service\n * @name DataTableService\n * @param $http {ng.IHttpService} http service for fetching rows and columns of data table.\n * @param MiQEndpointsService {Object} service which holds endpoints to each data store.\n */\nexport default class DataTableService implements IDataTableService {\n  private columns: any[];\n  private rows: any[];\n  private settings: any;\n  /*@ngInject*/\n  constructor(private $http: ng.IHttpService, private MiQEndpointsService: any) {}\n\n  /**\n   * Public method for fetching data from url combined from `MiQEndpointsService.rootPoint` and\n   * `MiQEndpointsService.endpoints.listDataTable`. Result will be promise with type `IRowsColsResponse`. Which is\n   * ```javascript\n   * interface IRowsColsResponse {\n   *  rows: any[];\n   *  cols: any[];\n   *  settings: ITableSettings;\n   * }\n   * ```\n   * @methodOf miqStaticAssets.gtl\n   * @memberof DataTableService\n   * @function retrieveRowsAndColumnsFromUrl\n   * @returns {ng.IPromise<IRowsColsResponse>} promise with type `IRowsColsResponse`.\n   */\n  public retrieveRowsAndColumnsFromUrl(modelName?: string,\n                                       activeTree?: string,\n                                       currId?: string): ng.IPromise<IRowsColsResponse> {\n    return this.fetchData(DataTableService.generateConfig(modelName, activeTree, currId))\n      .then(responseData => {\n        this.columns = responseData.data.data.head;\n        this.rows = responseData.data.data.rows;\n        this.settings = responseData.data.settings;\n        return {\n          cols: this.columns,\n          rows: this.rows,\n          settings: responseData.data.settings\n        };\n      }\n    );\n  }\n\n  /**\n   * Method which will do actual http get request using $http service.\n   * @param config which contains config params.\n   * @returns {IHttpPromise<any>} promise for later data filtering.\n   */\n  private fetchData(config: any): ng.IPromise<any> {\n    return this.$http.get(\n      this.MiQEndpointsService.rootPoint + this.MiQEndpointsService.endpoints.listDataTable,\n      config\n    );\n  }\n\n  /**\n   * Static function which will generate http get config from given variables.\n   * @param modelName string with name of model.\n   * @param activeTree string with active tree.\n   * @param currId ID of current item.\n   * @returns {{params: {}}} config object with params set.\n   */\n  public static generateConfig(modelName?: string, activeTree?: string, currId?: string) {\n    let config = {params: {}};\n    _.assign(config.params, DataTableService.generateModelConfig(modelName));\n    _.assign(config.params, DataTableService.generateActiveTreeConfig(activeTree));\n    _.assign(config.params, DataTableService.generateModuleIdConfig(currId));\n    return config;\n  }\n\n  /**\n   * Static function for generating model object, this object will be assigned to `config.params`.\n   * @param modelName name of currently selected model.\n   * @returns {any|{model: any}} object if any model is selected.\n   */\n  private static generateModelConfig(modelName): any {\n    return modelName && {model: modelName};\n  }\n\n  /**\n   * Static function for generating active tree object, this object will be assigned to `config.params`.\n   * @param activeTree name of currently selected tree.\n   * @returns {any|{active_tree: any}} object if any tree is selected.\n   */\n  private static generateActiveTreeConfig(activeTree): any {\n    return activeTree && {active_tree: activeTree};\n  }\n\n  /**\n   * Static function for generating module id object, this object will be assigned to `config.params`.\n   * @param currId currently selected module's ID.\n   * @returns {any|{model_id: any}} object if any module ID is present.\n   */\n  private static generateModuleIdConfig(currId): any {\n    return currId && {model_id: currId};\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/services/dataTableService.ts\n **/","import LimitToSuffix from './limitToSuffixFilter';\n\nexport default (module: ng.IModule) => {\n  module.filter('limitToSuffix', LimitToSuffix.filter);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/filters/index.ts\n **/","export default class LimitToSuffix {\n  public static filter() {\n    return (value, start, end) => {\n      return value.length > start + end + 3 ? `${value.slice(0, start)}...${value.slice(-end)}` : value;\n    };\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/filters/limitToSuffixFilter.ts\n **/","import dataTable from './data-table';\n\nexport default (module: ng.IModule) => {\n  dataTable(module);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/components/index.ts\n **/","import DataTable from './dataTableComponent';\n\nexport default (module: ng.IModule) => {\n  module.component('miqDataTable', new DataTable);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/components/data-table/index.ts\n **/","import {IDataTableBinding} from '../../interfaces/dataTable';\nimport {DataViewClass} from '../../interfaces/abstractDataViewClass';\n\n/**\n * This controller is for managing data table entities. It extends {@link miqStaticAssets.gtl.DataViewClass}\n * which is abstract class with basic methods for filtering, sorting and limiting entries in data table.\n * @extends miqStaticAssets.gtl.DataViewClass\n * @memberof miqStaticAssets.gtl\n * @ngdoc controller\n * @name DataTableController\n */\nexport class DataTableController extends DataViewClass implements IDataTableBinding {\n  /**\n   * Public method for getting column class, narrow column with checkbox or image.\n   * @memberof DataTableController\n   * @function getColumnClass\n   * @param column {Object} header column. This column will have `is_narrow` property set to true and `narrow` class\n   * will be present in classes.\n   * @returns {Object} angular class object. `{narrow: boolean}`\n   */\n  public getColumnClass(column: any) {\n    return {\n      narrow: column.is_narrow\n    };\n  }\n\n  /**\n   * Public method for checking if column of table is icon or image.\n   * @memberof DataTableController\n   * @function isIconOrImage\n   * @param row {object} whole row with data.\n   * @param columnKey header column key.\n   * @returns {boolean} true | false, if column is image or icon.\n   */\n  public isIconOrImage(row, columnKey): boolean {\n    return row && row.cells &&\n      (row.cells[columnKey].hasOwnProperty('icon') || row.cells[columnKey].hasOwnProperty('image'));\n  }\n\n  /**\n   * Public method for finding out if it's filtered by header column.\n   * @memberof DataTableController\n   * @function isFilteredBy\n   * @param column column which is checked if it's filtered by.\n   * @returns {boolean} true | false if `this.settings.sortBy.sortObject.col_idx` is equal to `column.col_idx`.\n   */\n  public isFilteredBy(column: any) {\n    return !!this.settings.sortBy && (this.settings.sortBy.sortObject.col_idx === column.col_idx);\n  }\n\n  /**\n   * Public method for getting sort class, either `fa-sort-asc` or `fa-sort-desc`.\n   * @memberof DataTableController\n   * @function getSortClass\n   * @returns {Object} angular class object: `{fa-sort-asc: boolean, fa-sort-desc: boolean}`\n   */\n  public getSortClass() {\n    return {\n      'fa-sort-asc': !!this.settings.sortBy && this.settings.sortBy.isAscending,\n      'fa-sort-desc': !(!!this.settings.sortBy && this.settings.sortBy.isAscending)\n    };\n  }\n\n  /**\n   * Angular's $onchange function to find out if one of bounded option has changed.\n   * @memberof DataTableController\n   * @function $onChanges\n   * @param changesObj angular changed object.\n   */\n  public $onChanges(changesObj: any) {\n    if (changesObj.settings && this.settings) {\n      this.currentPageView = this.settings.current;\n    }\n  }\n\n}\n\n/**\n * @description\n * @memberof miqStaticAssets.gtl\n * @ngdoc component\n * @name miqDataTable\n * @attr {Object} rows\n *    Array of rows which will be displayed.\n * @attr {Object} perPage\n *    Object which will be displayed as dropdown picker to filter number of rows.\n * @attr {Object} columns\n *    Columns which will be displayed as header in table.\n * @attr {Object} settings\n *    Table settings look at {@see ITableSettings} for more information.\n * @attr {Expression} loadMoreItems\n *    Function which will be called upon loading more items. Function call has to have `start`, `perPage` params.\n * @attr {Expression} onSort\n *    Function to triggering sorting items. Function call has to have `headerId`, `isAscending` params.\n * @attr {Expression} onRowClick\n *    Function which will be executed when click on row event is fired. Function call has to have `item` param.\n * @attr {Expression} onItemSelected\n *    Function to be called on selecting item (trough selectbox next to each row). Function call has to have `item`,\n *    `isSelected` params.\n * @example\n * <miq-data-table rows=\"ctrl.rows\"\n *                 columns=\"ctrl.columns\"\n *                 per-page=\"ctrl.perPage\"\n *                 settings=\"ctrl.settings\"\n *                 load-more-items=\"ctrl.onLoadMoreItems(start, perPage)\"\n *                 on-sort=\"ctrl.onSort(headerId, isAscending)\"\n *                 on-row-click=\"ctrl.onRowClick(item)\"\n *                 on-item-selected=\"ctrl.onItemSelect(item, isSelected)\">\n * </miq-data-table>\n */\nexport default class DataTable {\n  public replace: boolean = true;\n  public template = require<string>('./data-table.html');\n  public controller: any = DataTableController;\n  public transclude: boolean = true;\n  public controllerAs: string = 'tableCtrl';\n  public bindings: any = {\n    rows: '<',\n    columns: '<',\n    perPage: '<',\n    settings: '<',\n    loadMoreItems: '&',\n    onSort: '&',\n    onRowClick: '&',\n    onItemSelected: '&'\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/components/data-table/dataTableComponent.ts\n **/","import {IDataTableBinding, ITableSettings} from './dataTable';\n\n/**\n * This is abstract controller for implementing shared methods between data table and tile views.\n * @memberof miqStaticAssets.gtl\n * @ngdoc controller\n * @name DataViewClass\n */\nexport abstract class DataViewClass implements IDataTableBinding {\n  public perPage: any;\n  public rows: any[];\n  public columns: any[];\n\n  public onRowClick: (args: {item: any}) => void;\n  public settings: ITableSettings;\n  public currentPageView: number = 1;\n\n  public onSort: (args: {headerId: any, isAscending: boolean}) => void;\n  public onItemSelected: (args: {item: any, isSelected: boolean}) => void;\n  public loadMoreItems: (args: {start: number, perPage: number}) => void;\n\n  /**\n   * Public method which will perform checking all entities.\n   * @memberof DataViewClass\n   * @function onCheckAll\n   * @param isChecked true | false based on checked value.\n   */\n  public onCheckAll(isChecked: boolean) {\n    _.each(this.rows, oneRow => {\n      this.onItemSelected({item: oneRow, isSelected: isChecked});\n    });\n  }\n\n  /**\n   * Helper method which will pass sortId and isAscending to parent controller.\n   * @memberof DataViewClass\n   * @function onSortClick\n   * @param sortId id of sorted header column.\n   * @param isAscending true | false based on ascending order.\n   */\n  public onSortClick(sortId, isAscending) {\n    this.onSort({headerId: sortId, isAscending: isAscending});\n  }\n\n  /**\n   * Helper method for calculating loading more items after selecting how many items per page should be visible.\n   * @memberof DataViewClass\n   * @function perPageClick\n   * @param item {Object} enhanced IToolbarItem with value.\n   */\n  public perPageClick(item) {\n    const maxPage = Math.ceil(this.settings.items / item.value);\n    this.currentPageView = this.currentPageView > maxPage ? maxPage : this.currentPageView;\n    const start = DataViewClass.calculateStartIndex(this.currentPageView, item.value);\n    this.loadMoreItems({start: start, perPage: item.value});\n  }\n\n  /**\n   * Helper method for calculating what page should be visible, it works with perPage and total amount of values.\n   * @memberof DataViewClass\n   * @function setPage\n   * @param pageNumber {number} number of desired page, if this page is out of bound, it will be rounded.\n   */\n  public setPage(pageNumber) {\n    if (pageNumber > this.settings.total) {\n      this.currentPageView = this.settings.total;\n      pageNumber = this.currentPageView;\n    }\n    this.currentPageView = pageNumber;\n    const start = DataViewClass.calculateStartIndex(pageNumber, this.settings.perpage);\n    this.loadMoreItems({start: start, perPage: this.settings.perpage});\n  }\n\n  /**\n   * Helper static method for calculating start index based on pageNumber and number of visible items.\n   * @memberof DataViewClass\n   * @function calculateStartIndex\n   * @param pageNumber {number} current page number.\n   * @param perPage {number} how many of items are visible per page.\n   * @returns {number} start index for limit filter.\n   */\n  protected static calculateStartIndex(pageNumber, perPage) {\n    return (pageNumber - 1) * perPage;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/gtl/interfaces/abstractDataViewClass.ts\n **/","module.exports = \"<div>\\n  <div class=\\\"dataTables_header miq-data-tables-header\\\" ng-if=\\\"tableCtrl.rows.length > 0\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"pull-right\\\">\\n        <div>\\n          <label>{{tableCtrl.perPage.label}}: </label>\\n          <miq-toolbar-list on-item-click=\\\"tableCtrl.perPageClick(item)\\\"\\n                            toolbar-list=\\\"tableCtrl.perPage\\\"></miq-toolbar-list>\\n        </div>\\n        <div>\\n          Some text sorted by\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <table class=\\\"table table-bordered table-striped table-hover mig-table-with-footer mig-table\\\">\\n    <thead>\\n    <tr>\\n      <th class=\\\"narrow miq-select\\\">\\n        <input ng-if=\\\"tableCtrl.rows.length !== 0\\\" type=\\\"checkbox\\\" ng-model=\\\"isChecked\\\" ng-click=\\\"tableCtrl.onCheckAll(isChecked)\\\" title=\\\"Select all\\\" />\\n      </th>\\n      <th ng-if=\\\"$index !== 0\\\"\\n          ng-repeat=\\\"column in tableCtrl.columns track by $index\\\"\\n          ng-click=\\\"tableCtrl.onSortClick($index, !!tableCtrl.settings.sortBy && !tableCtrl.settings.sortBy.isAscending)\\\"\\n          ng-class=\\\"tableCtrl.getColumnClass(column)\\\">\\n        {{column.text}}\\n        <div class=\\\"pull-right\\\" ng-if=\\\"tableCtrl.isFilteredBy(column)\\\" >\\n          <i class=\\\"fa\\\" ng-class=\\\"tableCtrl.getSortClass()\\\"></i>\\n        </div>\\n      </th>\\n    </tr>\\n    </thead>\\n    <tbody>\\n    <tr ng-repeat=\\\"row in tableCtrl.rows\\\"\\n        ng-class=\\\"{active : row.selected}\\\"\\n        ng-click=\\\"vm.onRowClick({$event: $event, rowData: row})\\\">\\n      <td ng-repeat=\\\"(columnKey, column) in tableCtrl.columns\\\" ng-class=\\\"{narrow: row.cells[columnKey].is_checkbox}\\\">\\n        <input ng-if=\\\"row.cells[columnKey].is_checkbox\\\"\\n               ng-click=\\\"tableCtrl.onRowSelected($event, isSelected, row)\\\"\\n               onclick=\\\"event.stopPropagation();\\\"\\n               type=\\\"checkbox\\\"\\n               ng-model=\\\"isSelected\\\"\\n               name=\\\"check_{{row.id}}\\\"\\n               value=\\\"{{row.id}}\\\"\\n               ng-checked=\\\"row.checked\\\"\\n               class=\\\"list-grid-checkbox\\\">\\n        <i ng-if=\\\"row.cells[columnKey].icon && tableCtrl.isIconOrImage(row, columnKey)\\\"\\n           class=\\\"{{row.cells[columnKey].icon}}\\\"\\n           title=\\\"row.cells[columnKey].title\\\"></i>\\n        <img ng-if=\\\"row.cells[columnKey].icon === null && tableCtrl.isIconOrImage(row, columnKey)\\\"\\n             ng-src=\\\"{{row.img_url}}\\\"\\n             alt=\\\"{{row.cells[columnKey].title}}\\\"\\n             title=\\\"{{row.cells[columnKey].title}}\\\" />\\n        <span ng-if=\\\"row.cells[columnKey].text\\\">\\n              {{row.cells[columnKey].text}}\\n          </span>\\n      </td>\\n    </tr>\\n    </tbody>\\n  </table>\\n  <div class=\\\"dataTables_footer\\\">\\n    <div class=\\\"dataTables_paginate paging_bootstrap_input\\\">\\n      <ul class=\\\"pagination\\\">\\n        <li ng-class=\\\"{disabled: tableCtrl.currentPageView === 1}\\\"\\n            class=\\\"first\\\"\\n            ng-click=\\\"tableCtrl.setPage(1)\\\">\\n          <span class=\\\"fa fa-angle-double-left\\\"></span>\\n        </li>\\n        <li ng-class=\\\"{disabled: tableCtrl.currentPageView === 1}\\\"\\n            class=\\\"prev\\\"\\n            ng-click=\\\"tableCtrl.setPage(tableCtrl.currentPageView - 1)\\\">\\n          <span class=\\\"fa fa-angle-left\\\"></span>\\n        </li>\\n      </ul>\\n      <div class=\\\"pagination-input\\\">\\n        <form ng-submit=\\\"tableCtrl.setPage(tableCtrl.currentPageView)\\\">\\n          <input type=\\\"text\\\" class=\\\"paginate_input\\\" ng-model=\\\"tableCtrl.currentPageView\\\">\\n          <span class=\\\"paginate_of\\\">of <b>{{tableCtrl.settings.total}}</b></span>\\n        </form>\\n      </div>\\n      <ul class=\\\"pagination\\\">\\n        <li ng-class=\\\"{disabled: tableCtrl.currentPageView === tableCtrl.settings.total}\\\"\\n            class=\\\"next\\\"\\n            ng-click=\\\"tableCtrl.setPage(tableCtrl.currentPageView + 1)\\\">\\n          <span class=\\\"fa fa-angle-right\\\"></span>\\n        </li>\\n        <li ng-class=\\\"{disabled: tableCtrl.currentPageView === tableCtrl.settings.total}\\\"\\n            class=\\\"last\\\"\\n            ng-click=\\\"tableCtrl.setPage(tableCtrl.settings.total)\\\">\\n          <span class=\\\"fa fa-angle-double-right\\\"></span>\\n        </li>\\n      </ul>\\n    </div>\\n  </div>\\n</div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/gtl/components/data-table/data-table.html\n ** module id = 49\n ** module chunks = 1\n **/"],"sourceRoot":""}